Hellfire

See commented code in mkdsk.cpp for a working example

WRITING
1. Open an ofstream file with the disk name as the first argument, and 
   "ios::out | ios::binary" as the second argument without quotation marks
2. Convert desired pointer to data structure into a const char *
3. Write() the const char * to the disk with buffer size sizeof(data structure)

READING
1. Open an ifstream file with the disk name as the first argument, and
   "ios::in | ios::binary" as the second argument without quotation marks
2. Declare a char buffer with size sizeof(data structure). Don't use a pointer
   to a char or a const char; this is only necessary for writing
3. Read() from the ifstream file into the char buffer with read size sizeof(data structure)
4. Initialize a pointer to your desired data structure to the buffer cast as a 
   pointer to the data structure
5. Print out your data members because I still have no idea why this shit works lol

For more information, consult the mkdsk.cpp file or this image:
https://is2-ssl.mzstatic.com/image/thumb/Video/v4/ed/79/b0/ed79b0c0-7617-a714-15be-2378cdb58221/source/1200x630bb.jpg

	/* RIP working char pointer shenanigans, April 2018 - April 2018
	const char * disk_c = (const char *) disk;
	disk_output.write(disk_c, sizeof(ssfsDisk));

	ifstream disk_input(disk_file_name, ios::in | ios::binary);

	char new_disk_c[sizeof(ssfsDisk)];
	disk_input.read(new_disk_c, sizeof(ssfsDisk));

	ssfsDisk * disk2 = (ssfsDisk *) new_disk_c;

	std::cout << disk2->num_blocks << std::endl;
	std::cout << disk2->block_size << std::endl;
	std::cout << disk2->num_files << std::endl;
	std::cout << disk2->disk_file_name << std::endl;
	
	disk_input.close();
	*/


